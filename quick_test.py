#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

from processor import Processor
from assembler import Assembler

def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    processor = Processor()
    assembler = Assembler()
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
    test_code = """
LOAD #100
ADD #50
STORE 200
LOAD 200
SUB #25
STORE 201
HALT
"""
    
    print("üìù –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:")
    print(test_code)
    
    try:
        # –ê—Å—Å–µ–º–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("üîß –ê—Å—Å–µ–º–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        instructions = assembler.assemble(test_code)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(instructions)} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        machine_codes = [instr['instruction'] for instr in instructions]
        processor.load_program(machine_codes)
        print("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä")
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        print("\nüöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
        print("–®–∞–≥ | PC | ACC | –ö–æ–º–∞–Ω–¥–∞")
        print("-" * 30)
        
        step = 0
        while not processor.halted and step < 20:
            pc_before = processor.PC
            acc_before = processor.ACC
            
            if processor.step():
                ir = processor.IR
                opcode = (ir >> 12) & 0xF
                operand = ir & 0xFFF
                
                opcodes = {0x0: 'HALT', 0x1: 'LOAD', 0x2: 'STORE', 0x3: 'ADD', 0x4: 'SUB', 0x5: 'CMP', 0x6: 'JMP', 0x7: 'JZ', 0x8: 'JNZ'}
                cmd_name = opcodes.get(opcode, f'UNK({opcode})')
                
                print(f"{step+1:3d} | {pc_before:2d} | {acc_before:3d} | {cmd_name} {operand}")
                step += 1
            else:
                break
                
        print("-" * 30)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        print(f"   ACC: {processor.ACC}")
        print(f"   PC:  {processor.PC}")
        print(f"   –°—Ç–∞—Ç—É—Å: {'–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if processor.halted else '–ê–∫—Ç–∏–≤–µ–Ω'}")
        print(f"   –®–∞–≥–æ–≤: {processor.step_count}")
        
        print("\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–º—è—Ç–∏:")
        for addr in [200, 201]:
            if processor.memory[addr] != 0:
                print(f"   Memory[{addr}] = {processor.memory[addr]}")
                
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        expected_200 = 150  # 100 + 50
        expected_201 = 125  # 150 - 25
        
        if processor.memory[200] == expected_200:
            print(f"   ‚úÖ Memory[200] = {processor.memory[200]} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_200})")
        else:
            print(f"   ‚ùå Memory[200] = {processor.memory[200]} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_200})")
            
        if processor.memory[201] == expected_201:
            print(f"   ‚úÖ Memory[201] = {processor.memory[201]} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_201})")
        else:
            print(f"   ‚ùå Memory[201] = {processor.memory[201]} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_201})")
            
        if processor.halted:
            print("   ‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("   ‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")
            
        print("\nüéâ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False
        
    return True

if __name__ == "__main__":
    success = quick_test()
    
    if success:
        print("\n" + "=" * 50)
        print("‚úÖ –≠–ú–£–õ–Ø–¢–û–† –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("üìã –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Ä—É—á–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é GUI:")
        print("   python3 gui.py")
        print("   python3 visual_gui.py") 
        print("   python3 enhanced_gui.py")
    else:
        print("\n" + "=" * 50)
        print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ —ç–º—É–ª—è—Ç–æ—Ä–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º GUI")

