#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from processor import Processor
from assembler import Assembler

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–µ–π—à—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ—à–∞–≥–æ–≤–æ
code = """
LOAD #42
STORE 100
HALT
"""

print("=== –¢–µ—Å—Ç –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ===")
print("–ö–æ–¥:")
print(code)

try:
    # –ê—Å—Å–µ–º–±–ª–∏—Ä—É–µ–º
    asm = Assembler()
    instructions = asm.assemble(code)
    print(f"\n‚úÖ –ê—Å—Å–µ–º–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: {len(instructions)} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
    
    for i, instr in enumerate(instructions):
        print(f"{i:04X}: {instr['instruction']:04X} - {instr['mnemonic']}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    proc = Processor()
    machine_codes = [instr['instruction'] for instr in instructions]
    proc.load_program(machine_codes)
    
    print(f"\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:")
    print(f"PC: {proc.PC}, ACC: {proc.ACC}, Halted: {proc.halted}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ—à–∞–≥–æ–≤–æ
    print(f"\nüîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—à–∞–≥–æ–≤–æ:")
    step = 0
    while not proc.halted and step < 10:
        old_acc = proc.ACC
        old_pc = proc.PC
        success = proc.step()
        step += 1
        print(f"–®–∞–≥ {step}: PC={old_pc}‚Üí{proc.PC}, ACC={old_acc}‚Üí{proc.ACC}, Halted={proc.halted}")
        if not success:
            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!")
            break
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"Memory[100] = {proc.memory[100]}")
    print(f"–û–∂–∏–¥–∞–µ—Ç—Å—è: 42")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()
