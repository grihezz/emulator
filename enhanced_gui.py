"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
–í–∫–ª—é—á–∞–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—ã, –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np
from processor import Processor
from assembler import Assembler

class PerformanceMonitor:
    def __init__(self):
        self.instruction_counts = {}
        self.memory_access_history = []
        self.execution_time_history = []
        self.register_value_history = {'ACC': [], 'PC': [], 'IR': []}
        
    def record_instruction(self, opcode):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é"""
        opcodes = {0x0: 'HALT', 0x1: 'LOAD', 0x2: 'STORE', 0x3: 'ADD', 0x4: 'SUB', 0x5: 'CMP', 0x6: 'JMP', 0x7: 'JZ', 0x8: 'JNZ'}
        mnemonic = opcodes.get(opcode, f'UNK({opcode})')
        
        if mnemonic in self.instruction_counts:
            self.instruction_counts[mnemonic] += 1
        else:
            self.instruction_counts[mnemonic] = 1
            
    def record_memory_access(self, address, access_type):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ø–∞–º—è—Ç–∏"""
        self.memory_access_history.append({'address': address, 'type': access_type, 'time': len(self.memory_access_history)})
        
    def record_register_values(self, acc, pc, ir):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤"""
        self.register_value_history['ACC'].append(acc)
        self.register_value_history['PC'].append(pc)
        self.register_value_history['IR'].append(ir)
        
    def reset(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.instruction_counts.clear()
        self.memory_access_history.clear()
        self.execution_time_history.clear()
        for key in self.register_value_history:
            self.register_value_history[key].clear()

class EnhancedProcessorGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —ç–º—É–ª—è—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ - –í–∞—Ä–∏–∞–Ω—Ç ‚Ññ9")
        self.root.geometry("1600x1000")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.processor = Processor()
        self.assembler = Assembler()
        self.performance_monitor = PerformanceMonitor()
        self.running = False
        
        # –°—Ç–∏–ª—å
        style = ttk.Style()
        style.theme_use('clam')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        self.update_display()
        
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", command=self.open_program)
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", command=self.save_program)
        file_menu.add_separator()
        file_menu.add_command(label="–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", command=self.export_stats)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.root.quit)
        
        # –ú–µ–Ω—é "–í–∏–¥"
        view_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–í–∏–¥", menu=view_menu)
        view_menu.add_command(label="–°–±—Ä–æ—Å –≥—Ä–∞—Ñ–∏–∫–æ–≤", command=self.reset_charts)
        view_menu.add_command(label="–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º", command=self.toggle_fullscreen)
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
        main_paned = ttk.PanedWindow(self.root, orient=tk.HORIZONTAL)
        main_paned.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –∫–æ–¥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        left_panel = ttk.Frame(main_paned)
        main_paned.add(left_panel, weight=1)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        center_panel = ttk.Frame(main_paned)
        main_paned.add(center_panel, weight=1)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑
        right_panel = ttk.Frame(main_paned)
        main_paned.add(right_panel, weight=1)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–Ω–µ–ª–µ–π
        self.create_left_panel(left_panel)
        self.create_center_panel(center_panel)
        self.create_right_panel(right_panel)
        
    def create_left_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ - –∫–æ–¥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = ttk.Label(parent, text="–†–µ–¥–∞–∫—Ç–æ—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", font=('Arial', 12, 'bold'))
        title.pack(pady=(0, 10))
        
        # –†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞
        code_frame = ttk.LabelFrame(parent, text="–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥", padding=10)
        code_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        self.code_text = scrolledtext.ScrolledText(code_frame, height=20, width=50, font=('Courier', 10))
        self.code_text.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–æ–º
        code_buttons = ttk.Frame(code_frame)
        code_buttons.pack(fill=tk.X)
        
        ttk.Button(code_buttons, text="–ê—Å—Å–µ–º–±–ª–∏—Ä–æ–≤–∞—Ç—å", command=self.assemble_code).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(code_buttons, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å", command=self.load_code).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(code_buttons, text="–ü—Ä–∏–º–µ—Ä—ã", command=self.show_examples).pack(side=tk.LEFT)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        exec_frame = ttk.LabelFrame(parent, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º", padding=10)
        exec_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        main_buttons = ttk.Frame(exec_frame)
        main_buttons.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Button(main_buttons, text="üîÑ –°–±—Ä–æ—Å", command=self.reset_processor).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(main_buttons, text="‚ñ∂Ô∏è –®–∞–≥", command=self.step_execution).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(main_buttons, text="‚èØÔ∏è –ó–∞–ø—É—Å–∫", command=self.toggle_execution).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(main_buttons, text="‚èπÔ∏è –°—Ç–æ–ø", command=self.stop_execution).pack(side=tk.LEFT)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        settings_frame = ttk.Frame(exec_frame)
        settings_frame.pack(fill=tk.X)
        
        ttk.Label(settings_frame, text="–°–∫–æ—Ä–æ—Å—Ç—å:").pack(side=tk.LEFT)
        self.speed_var = tk.DoubleVar(value=1.0)
        speed_scale = ttk.Scale(settings_frame, from_=0.1, to=5.0, variable=self.speed_var, orient=tk.HORIZONTAL)
        speed_scale.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(5, 5))
        self.speed_label = ttk.Label(settings_frame, text="1.0x")
        self.speed_label.pack(side=tk.RIGHT)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
        speed_scale.configure(command=self.update_speed_label)
        
        # –ú–∞—à–∏–Ω–Ω—ã–π –∫–æ–¥
        machine_frame = ttk.LabelFrame(parent, text="–ú–∞—à–∏–Ω–Ω—ã–π –∫–æ–¥", padding=10)
        machine_frame.pack(fill=tk.BOTH, expand=True)
        
        self.machine_text = scrolledtext.ScrolledText(machine_frame, height=10, width=50, font=('Courier', 9), state="disabled")
        self.machine_text.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.load_default_example()
        
    def create_center_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏ - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = ttk.Label(parent, text="–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞", font=('Arial', 12, 'bold'))
        title.pack(pady=(0, 10))
        
        # Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        notebook = ttk.Notebook(parent)
        notebook.pack(fill=tk.BOTH, expand=True)
        
        # –í–∫–ª–∞–¥–∫–∞ "–†–µ–≥–∏—Å—Ç—Ä—ã"
        reg_frame = ttk.Frame(notebook)
        notebook.add(reg_frame, text="–†–µ–≥–∏—Å—Ç—Ä—ã")
        self.create_registers_tab(reg_frame)
        
        # –í–∫–ª–∞–¥–∫–∞ "–ü–∞–º—è—Ç—å"
        mem_frame = ttk.Frame(notebook)
        notebook.add(mem_frame, text="–ü–∞–º—è—Ç—å")
        self.create_memory_tab(mem_frame)
        
        # –í–∫–ª–∞–¥–∫–∞ "–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤"
        stack_frame = ttk.Frame(notebook)
        notebook.add(stack_frame, text="–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞")
        self.create_trace_tab(stack_frame)
        
    def create_registers_tab(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã
        main_reg_frame = ttk.LabelFrame(parent, text="–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã", padding=10)
        main_reg_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
        self.acc_var = tk.StringVar()
        self.pc_var = tk.StringVar()
        self.ir_var = tk.StringVar()
        
        # –°–µ—Ç–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
        reg_grid = ttk.Frame(main_reg_frame)
        reg_grid.pack(fill=tk.X)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        ttk.Label(reg_grid, text="–†–µ–≥–∏—Å—Ç—Ä", font=('Arial', 10, 'bold')).grid(row=0, column=0, padx=5, pady=2, sticky=tk.W)
        ttk.Label(reg_grid, text="–ó–Ω–∞—á–µ–Ω–∏–µ (Dec)", font=('Arial', 10, 'bold')).grid(row=0, column=1, padx=5, pady=2, sticky=tk.W)
        ttk.Label(reg_grid, text="–ó–Ω–∞—á–µ–Ω–∏–µ (Hex)", font=('Arial', 10, 'bold')).grid(row=0, column=2, padx=5, pady=2, sticky=tk.W)
        ttk.Label(reg_grid, text="–ó–Ω–∞—á–µ–Ω–∏–µ (Bin)", font=('Arial', 10, 'bold')).grid(row=0, column=3, padx=5, pady=2, sticky=tk.W)
        
        # –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä
        ttk.Label(reg_grid, text="ACC", font=('Courier', 10, 'bold')).grid(row=1, column=0, padx=5, pady=2, sticky=tk.W)
        self.acc_dec_label = ttk.Label(reg_grid, text="0", font=('Courier', 10))
        self.acc_dec_label.grid(row=1, column=1, padx=5, pady=2, sticky=tk.W)
        self.acc_hex_label = ttk.Label(reg_grid, text="0x0000", font=('Courier', 10))
        self.acc_hex_label.grid(row=1, column=2, padx=5, pady=2, sticky=tk.W)
        self.acc_bin_label = ttk.Label(reg_grid, text="0000000000000000", font=('Courier', 10))
        self.acc_bin_label.grid(row=1, column=3, padx=5, pady=2, sticky=tk.W)
        
        # –°—á–µ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
        ttk.Label(reg_grid, text="PC", font=('Courier', 10, 'bold')).grid(row=2, column=0, padx=5, pady=2, sticky=tk.W)
        self.pc_dec_label = ttk.Label(reg_grid, text="0", font=('Courier', 10))
        self.pc_dec_label.grid(row=2, column=1, padx=5, pady=2, sticky=tk.W)
        self.pc_hex_label = ttk.Label(reg_grid, text="0x0000", font=('Courier', 10))
        self.pc_hex_label.grid(row=2, column=2, padx=5, pady=2, sticky=tk.W)
        self.pc_bin_label = ttk.Label(reg_grid, text="0000000000000000", font=('Courier', 10))
        self.pc_bin_label.grid(row=2, column=3, padx=5, pady=2, sticky=tk.W)
        
        # –†–µ–≥–∏—Å—Ç—Ä –∫–æ–º–∞–Ω–¥
        ttk.Label(reg_grid, text="IR", font=('Courier', 10, 'bold')).grid(row=3, column=0, padx=5, pady=2, sticky=tk.W)
        self.ir_dec_label = ttk.Label(reg_grid, text="0", font=('Courier', 10))
        self.ir_dec_label.grid(row=3, column=1, padx=5, pady=2, sticky=tk.W)
        self.ir_hex_label = ttk.Label(reg_grid, text="0x0000", font=('Courier', 10))
        self.ir_hex_label.grid(row=3, column=2, padx=5, pady=2, sticky=tk.W)
        self.ir_bin_label = ttk.Label(reg_grid, text="0000000000000000", font=('Courier', 10))
        self.ir_bin_label.grid(row=3, column=3, padx=5, pady=2, sticky=tk.W)
        
        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã
        decode_frame = ttk.LabelFrame(parent, text="–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã", padding=10)
        decode_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.decode_text = scrolledtext.ScrolledText(decode_frame, height=4, width=50, font=('Courier', 10), state="disabled")
        self.decode_text.pack(fill=tk.BOTH, expand=True)
        
        # –§–ª–∞–≥–∏
        flags_frame = ttk.LabelFrame(parent, text="–§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è", padding=10)
        flags_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.flag_vars = {}
        flag_info = [
            ('ZF', '–ù–æ–ª—å', '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–≤–µ–Ω –Ω—É–ª—é'),
            ('SF', '–ó–Ω–∞–∫', '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π'),
            ('CF', '–ü–µ—Ä–µ–Ω–æ—Å', '–ü—Ä–æ–∏–∑–æ—à–µ–ª –ø–µ—Ä–µ–Ω–æ—Å –∏–∑ —Å—Ç–∞—Ä—à–µ–≥–æ —Ä–∞–∑—Ä—è–¥–∞'),
            ('OF', '–ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ', '–ü—Ä–æ–∏–∑–æ—à–ª–æ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ')
        ]
        
        for i, (flag, name, desc) in enumerate(flag_info):
            frame = ttk.Frame(flags_frame)
            frame.pack(fill=tk.X, pady=2)
            
            var = tk.BooleanVar()
            self.flag_vars[flag] = var
            
            cb = ttk.Checkbutton(frame, text=f"{flag} ({name})", variable=var, state="disabled")
            cb.pack(side=tk.LEFT)
            
            ttk.Label(frame, text=desc, font=('Arial', 8), foreground='gray').pack(side=tk.LEFT, padx=(10, 0))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        stats_frame = ttk.LabelFrame(parent, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", padding=10)
        stats_frame.pack(fill=tk.BOTH, expand=True)
        
        self.status_var = tk.StringVar()
        self.step_count_var = tk.StringVar()
        self.cycle_count_var = tk.StringVar()
        
        stats_grid = ttk.Frame(stats_frame)
        stats_grid.pack(fill=tk.X)
        
        ttk.Label(stats_grid, text="–°—Ç–∞—Ç—É—Å:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=2)
        ttk.Label(stats_grid, textvariable=self.status_var, font=('Courier', 10)).grid(row=0, column=1, sticky=tk.W, padx=5, pady=2)
        
        ttk.Label(stats_grid, text="–®–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:").grid(row=1, column=0, sticky=tk.W, padx=5, pady=2)
        ttk.Label(stats_grid, textvariable=self.step_count_var, font=('Courier', 10)).grid(row=1, column=1, sticky=tk.W, padx=5, pady=2)
        
    def create_memory_tab(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø–∞–º—è—Ç–∏"""
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏
        mem_paned = ttk.PanedWindow(parent, orient=tk.VERTICAL)
        mem_paned.pack(fill=tk.BOTH, expand=True)
        
        # –ü–∞–º—è—Ç—å –∫–æ–º–∞–Ω–¥
        cmd_mem_frame = ttk.LabelFrame(mem_paned, text="–ü–∞–º—è—Ç—å –∫–æ–º–∞–Ω–¥", padding=10)
        mem_paned.add(cmd_mem_frame, weight=1)
        
        self.memory_text = scrolledtext.ScrolledText(cmd_mem_frame, height=15, font=('Courier', 9))
        self.memory_text.pack(fill=tk.BOTH, expand=True)
        
        # –ü–∞–º—è—Ç—å –¥–∞–Ω–Ω—ã—Ö
        data_mem_frame = ttk.LabelFrame(mem_paned, text="–ü–∞–º—è—Ç—å –¥–∞–Ω–Ω—ã—Ö", padding=10)
        mem_paned.add(data_mem_frame, weight=1)
        
        self.data_text = scrolledtext.ScrolledText(data_mem_frame, height=15, font=('Courier', 9))
        self.data_text.pack(fill=tk.BOTH, expand=True)
        
    def create_trace_tab(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏"""
        trace_frame = ttk.LabelFrame(parent, text="–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", padding=10)
        trace_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        self.trace_text = scrolledtext.ScrolledText(trace_frame, height=20, font=('Courier', 9))
        self.trace_text.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        trace_buttons = ttk.Frame(trace_frame)
        trace_buttons.pack(fill=tk.X)
        
        ttk.Button(trace_buttons, text="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_trace).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(trace_buttons, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_trace).pack(side=tk.LEFT)
        
    def create_right_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ - –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = ttk.Label(parent, text="–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", font=('Arial', 12, 'bold'))
        title.pack(pady=(0, 10))
        
        # Notebook –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        charts_notebook = ttk.Notebook(parent)
        charts_notebook.pack(fill=tk.BOTH, expand=True)
        
        # –í–∫–ª–∞–¥–∫–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥"
        instr_frame = ttk.Frame(charts_notebook)
        charts_notebook.add(instr_frame, text="–ö–æ–º–∞–Ω–¥—ã")
        self.create_instruction_chart(instr_frame)
        
        # –í–∫–ª–∞–¥–∫–∞ "–†–µ–≥–∏—Å—Ç—Ä—ã"
        reg_chart_frame = ttk.Frame(charts_notebook)
        charts_notebook.add(reg_chart_frame, text="–†–µ–≥–∏—Å—Ç—Ä—ã")
        self.create_register_chart(reg_chart_frame)
        
        # –í–∫–ª–∞–¥–∫–∞ "–ü–∞–º—è—Ç—å"
        mem_chart_frame = ttk.Frame(charts_notebook)
        charts_notebook.add(mem_chart_frame, text="–ü–∞–º—è—Ç—å")
        self.create_memory_chart(mem_chart_frame)
        
    def create_instruction_chart(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
        self.instr_fig, self.instr_ax = plt.subplots(figsize=(6, 4))
        self.instr_canvas = FigureCanvasTkAgg(self.instr_fig, parent)
        self.instr_canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        
        self.instr_ax.set_title('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥')
        self.instr_ax.set_xlabel('–ö–æ–º–∞–Ω–¥—ã')
        self.instr_ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        
    def create_register_chart(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤"""
        self.reg_fig, self.reg_ax = plt.subplots(figsize=(6, 4))
        self.reg_canvas = FigureCanvasTkAgg(self.reg_fig, parent)
        self.reg_canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        
        self.reg_ax.set_title('–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤')
        self.reg_ax.set_xlabel('–®–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        self.reg_ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
        
    def create_memory_chart(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –ø–∞–º—è—Ç–∏"""
        self.mem_fig, self.mem_ax = plt.subplots(figsize=(6, 4))
        self.mem_canvas = FigureCanvasTkAgg(self.mem_fig, parent)
        self.mem_canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        
        self.mem_ax.set_title('–ö–∞—Ä—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –ø–∞–º—è—Ç–∏')
        self.mem_ax.set_xlabel('–ê–¥—Ä–µ—Å –ø–∞–º—è—Ç–∏')
        self.mem_ax.set_ylabel('–í—Ä–µ–º—è –æ–±—Ä–∞—â–µ–Ω–∏—è')
        
    def load_default_example(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        example = """; –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
; –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —á–∏—Å–ª–∞ 5

START:
    LOAD #5          ; –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∏—Å–ª–æ 5
    STORE 100        ; –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é n
    LOAD #1          ; –ó–∞–≥—Ä—É–∂–∞–µ–º 1 (—Ä–µ–∑—É–ª—å—Ç–∞—Ç)
    STORE 101        ; –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é result

LOOP:
    LOAD 100         ; –ó–∞–≥—Ä—É–∂–∞–µ–º n
    CMP #0           ; –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å 0
    JZ END           ; –ï—Å–ª–∏ n = 0, –∑–∞–≤–µ—Ä—à–∞–µ–º
    
    LOAD 101         ; –ó–∞–≥—Ä—É–∂–∞–µ–º result
    STORE 102        ; –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    LOAD 100         ; –ó–∞–≥—Ä—É–∂–∞–µ–º n
    STORE 103        ; –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
    
    ; –£–º–Ω–æ–∂–µ–Ω–∏–µ result * n (—á–µ—Ä–µ–∑ —Å–ª–æ–∂–µ–Ω–∏–µ)
    LOAD #0          ; –û–±–Ω—É–ª—è–µ–º result
    STORE 101
    
MULT:
    LOAD 103         ; –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    CMP #0           ; –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å 0
    JZ NEXT          ; –ï—Å–ª–∏ 0, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
    
    LOAD 101         ; –ó–∞–≥—Ä—É–∂–∞–µ–º result
    ADD 102          ; –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    STORE 101        ; –°–æ—Ö—Ä–∞–Ω—è–µ–º result
    
    LOAD 103         ; –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    SUB #1           ; –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 1
    STORE 103        ; –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—á–µ—Ç—á–∏–∫
    JMP MULT         ; –ü–æ–≤—Ç–æ—Ä—è–µ–º —É–º–Ω–æ–∂–µ–Ω–∏–µ
    
NEXT:
    LOAD 100         ; –ó–∞–≥—Ä—É–∂–∞–µ–º n
    SUB #1           ; –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 1
    STORE 100        ; –°–æ—Ö—Ä–∞–Ω—è–µ–º n
    JMP LOOP         ; –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—á–∞–ª—É —Ü–∏–∫–ª–∞

END:
    HALT             ; –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π 101
"""
        self.code_text.insert(tk.END, example)
        
    def update_speed_label(self, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        self.speed_label.config(text=f"{float(value):.1f}x")
        
    def assemble_code(self):
        """–ê—Å—Å–µ–º–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞"""
        try:
            source = self.code_text.get(1.0, tk.END)
            instructions = self.assembler.assemble(source)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—à–∏–Ω–Ω—ã–π –∫–æ–¥
            self.machine_text.config(state="normal")
            self.machine_text.delete(1.0, tk.END)
            
            for instr in instructions:
                line = f"{instr['address']:04X}: {instr['instruction']:04X} - {instr['mnemonic']} {instr.get('operand', '')}\n"
                self.machine_text.insert(tk.END, line)
                
            self.machine_text.config(state="disabled")
            
            self.assembled_instructions = instructions
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ö–æ–¥ –∞—Å—Å–µ–º–±–ª–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {len(instructions)}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –∞—Å—Å–µ–º–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è", str(e))
            
    def load_code(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä"""
        try:
            if hasattr(self, 'assembled_instructions'):
                machine_codes = [instr['instruction'] for instr in self.assembled_instructions]
                self.processor.load_program(machine_codes)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                test_data = [5, 4, 3, 2, 1]
                self.processor.load_data(test_data, 200)
                
                self.update_display()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä!")
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∞—Å—Å–µ–º–±–ª–∏—Ä—É–π—Ç–µ –∫–æ–¥!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", str(e))
            
    def step_execution(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞"""
        if not self.processor.halted:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            old_ir = self.processor.IR
            old_pc = self.processor.PC
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥
            success = self.processor.step()
            
            if success:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                opcode = (self.processor.IR >> 12) & 0xF
                self.performance_monitor.record_instruction(opcode)
                self.performance_monitor.record_register_values(
                    self.processor.ACC, self.processor.PC, self.processor.IR
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                self.log_execution_step(old_pc, old_ir)
                
            self.update_display()
            self.update_charts()
            
    def toggle_execution(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if self.running:
            self.running = False
        else:
            self.running = True
            self.run_continuous()
            
    def run_continuous(self):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"""
        if self.running and not self.processor.halted:
            self.step_execution()
            delay = int(1000 / self.speed_var.get())
            self.root.after(delay, self.run_continuous)
        else:
            self.running = False
            
    def stop_execution(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        self.running = False
        
    def reset_processor(self):
        """–°–±—Ä–æ—Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        self.running = False
        self.processor.reset()
        self.performance_monitor.reset()
        self.clear_trace()
        self.update_display()
        self.update_charts()
        
    def log_execution_step(self, old_pc, old_ir):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–≥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        opcode = (self.processor.IR >> 12) & 0xF
        operand = self.processor.IR & 0xFFF
        
        opcodes = {0x0: 'HALT', 0x1: 'LOAD', 0x2: 'STORE', 0x3: 'ADD', 0x4: 'SUB', 0x5: 'CMP', 0x6: 'JMP', 0x7: 'JZ', 0x8: 'JNZ'}
        mnemonic = opcodes.get(opcode, f'UNK({opcode})')
        
        log_entry = f"[{self.processor.step_count:4d}] PC:{old_pc:3d} | {mnemonic:5s} {operand:3d} | ACC:{self.processor.ACC:5d} | Flags: {'Z' if self.processor.flags['ZF'] else '-'}{'S' if self.processor.flags['SF'] else '-'}{'C' if self.processor.flags['CF'] else '-'}{'O' if self.processor.flags['OF'] else '-'}\n"
        
        self.trace_text.insert(tk.END, log_entry)
        self.trace_text.see(tk.END)
        
    def clear_trace(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏"""
        self.trace_text.delete(1.0, tk.END)
        
    def save_trace(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏"""
        from tkinter import filedialog
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(self.trace_text.get(1.0, tk.END))
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {filename}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{str(e)}")
                
    def update_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        acc = self.processor.ACC
        pc = self.processor.PC
        ir = self.processor.IR
        
        self.acc_dec_label.config(text=str(acc))
        self.acc_hex_label.config(text=f"0x{acc:04X}")
        self.acc_bin_label.config(text=f"{acc:016b}")
        
        self.pc_dec_label.config(text=str(pc))
        self.pc_hex_label.config(text=f"0x{pc:04X}")
        self.pc_bin_label.config(text=f"{pc:016b}")
        
        self.ir_dec_label.config(text=str(ir))
        self.ir_hex_label.config(text=f"0x{ir:04X}")
        self.ir_bin_label.config(text=f"{ir:016b}")
        
        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã
        self.decode_text.config(state="normal")
        self.decode_text.delete(1.0, tk.END)
        
        if ir != 0:
            opcode = (ir >> 12) & 0xF
            operand = ir & 0xFFF
            disasm = self.processor.disassemble_instruction(ir)
            
            decode_info = f"–ö–æ–º–∞–Ω–¥–∞: {disasm}\n"
            decode_info += f"–ö–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–∏: {opcode} (0x{opcode:X})\n"
            decode_info += f"–û–ø–µ—Ä–∞–Ω–¥: {operand} (0x{operand:03X})\n"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–¥—Ä–µ—Å–∞—Ü–∏–∏
            if operand >= 512:
                decode_info += f"–¢–∏–ø –∞–¥—Ä–µ—Å–∞—Ü–∏–∏: –ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è (#{operand - 512})\n"
            elif operand >= 256:
                decode_info += f"–¢–∏–ø –∞–¥—Ä–µ—Å–∞—Ü–∏–∏: –ö–æ—Å–≤–µ–Ω–Ω–∞—è (({operand - 256}))\n"
            else:
                decode_info += f"–¢–∏–ø –∞–¥—Ä–µ—Å–∞—Ü–∏–∏: –ü—Ä—è–º–∞—è ({operand})\n"
                
            self.decode_text.insert(tk.END, decode_info)
            
        self.decode_text.config(state="disabled")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏
        for flag, var in self.flag_vars.items():
            var.set(self.processor.flags[flag])
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if self.processor.halted:
            self.status_var.set("–û–°–¢–ê–ù–û–í–õ–ï–ù")
        elif self.running:
            self.status_var.set("–í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø")
        else:
            self.status_var.set("–ì–û–¢–û–í")
            
        self.step_count_var.set(str(self.processor.step_count))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å
        self.update_memory_display()
        
    def update_memory_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        # –ü–∞–º—è—Ç—å –∫–æ–º–∞–Ω–¥
        self.memory_text.delete(1.0, tk.END)
        for i in range(min(100, len(self.processor.memory))):
            if self.processor.memory[i] != 0:
                disasm = self.processor.disassemble_instruction(self.processor.memory[i])
                line = f"{i:04X}: {self.processor.memory[i]:04X} - {disasm}"
                if i == self.processor.PC and not self.processor.halted:
                    line = ">>> " + line
                line += "\n"
                self.memory_text.insert(tk.END, line)
                
        # –ü–∞–º—è—Ç—å –¥–∞–Ω–Ω—ã—Ö
        self.data_text.delete(1.0, tk.END)
        for i in range(100, min(300, len(self.processor.memory))):
            if self.processor.memory[i] != 0:
                line = f"{i:04X}: {self.processor.memory[i]:04X} ({self.processor.memory[i]})\n"
                self.data_text.insert(tk.END, line)
                
    def update_charts(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–º–∞–Ω–¥
        if self.performance_monitor.instruction_counts:
            self.instr_ax.clear()
            commands = list(self.performance_monitor.instruction_counts.keys())
            counts = list(self.performance_monitor.instruction_counts.values())
            
            bars = self.instr_ax.bar(commands, counts, color='skyblue', edgecolor='navy')
            self.instr_ax.set_title('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥')
            self.instr_ax.set_xlabel('–ö–æ–º–∞–Ω–¥—ã')
            self.instr_ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar, count in zip(bars, counts):
                height = bar.get_height()
                self.instr_ax.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                                 f'{count}', ha='center', va='bottom')
                                 
            self.instr_canvas.draw()
            
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
        history = self.performance_monitor.register_value_history
        if history['ACC']:
            self.reg_ax.clear()
            steps = range(len(history['ACC']))
            
            self.reg_ax.plot(steps, history['ACC'], label='ACC', marker='o', markersize=3)
            self.reg_ax.plot(steps, history['PC'], label='PC', marker='s', markersize=3)
            
            self.reg_ax.set_title('–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤')
            self.reg_ax.set_xlabel('–®–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
            self.reg_ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
            self.reg_ax.legend()
            self.reg_ax.grid(True, alpha=0.3)
            
            self.reg_canvas.draw()
            
        # –ì—Ä–∞—Ñ–∏–∫ –ø–∞–º—è—Ç–∏
        if self.performance_monitor.memory_access_history:
            self.mem_ax.clear()
            addresses = [access['address'] for access in self.performance_monitor.memory_access_history]
            times = [access['time'] for access in self.performance_monitor.memory_access_history]
            
            self.mem_ax.scatter(addresses, times, alpha=0.6, s=20)
            self.mem_ax.set_title('–ö–∞—Ä—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –ø–∞–º—è—Ç–∏')
            self.mem_ax.set_xlabel('–ê–¥—Ä–µ—Å –ø–∞–º—è—Ç–∏')
            self.mem_ax.set_ylabel('–í—Ä–µ–º—è –æ–±—Ä–∞—â–µ–Ω–∏—è')
            self.mem_ax.grid(True, alpha=0.3)
            
            self.mem_canvas.draw()
            
    def reset_charts(self):
        """–°–±—Ä–æ—Å –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        for ax in [self.instr_ax, self.reg_ax, self.mem_ax]:
            ax.clear()
        for canvas in [self.instr_canvas, self.reg_canvas, self.mem_canvas]:
            canvas.draw()
            
    def show_examples(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–≥—Ä–∞–º–º"""
        # –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–º–µ—Ä–æ–≤
        examples = {
            "–§–∞–∫—Ç–æ—Ä–∏–∞–ª": self.load_default_example,
            "–ü–æ–∏—Å–∫ –º–∞–∫—Å–∏–º—É–º–∞": lambda: self.load_example("max_search"),
            "–°–≤–µ—Ä—Ç–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤": lambda: self.load_example("convolution")
        }
        
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫–∞ –º–∞–∫—Å–∏–º—É–º–∞
        self.code_text.delete(1.0, tk.END)
        max_example = """; –ü–æ–∏—Å–∫ –º–∞–∫—Å–∏–º—É–º–∞ –≤ –º–∞—Å—Å–∏–≤–µ
START:
    LOAD 200         ; –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    STORE 100        ; –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –º–∞–∫—Å–∏–º—É–º
    
    LOAD 201         ; –í—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç
    CMP 100          ; –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –º–∞–∫—Å–∏–º—É–º–æ–º
    JZ CHECK3        ; –ï—Å–ª–∏ –º–µ–Ω—å—à–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    STORE 100        ; –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º
    
CHECK3:
    LOAD 202         ; –¢—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç
    CMP 100          ; –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –º–∞–∫—Å–∏–º—É–º–æ–º
    JZ CHECK4        ; –ï—Å–ª–∏ –º–µ–Ω—å—à–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    STORE 100        ; –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º
    
CHECK4:
    LOAD 203         ; –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç
    CMP 100          ; –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –º–∞–∫—Å–∏–º—É–º–æ–º
    JZ CHECK5        ; –ï—Å–ª–∏ –º–µ–Ω—å—à–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    STORE 100        ; –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º
    
CHECK5:
    LOAD 204         ; –ü—è—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç
    CMP 100          ; –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –º–∞–∫—Å–∏–º—É–º–æ–º
    JZ END           ; –ï—Å–ª–∏ –º–µ–Ω—å—à–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º
    STORE 100        ; –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º
    
END:
    HALT             ; –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∞–¥—Ä–µ—Å–µ 100
"""
        self.code_text.insert(tk.END, max_example)
        
    def load_example(self, example_name):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞"""
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤
        pass
        
    def open_program(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        from tkinter import filedialog
        filename = filedialog.askopenfilename(
            filetypes=[("Assembly files", "*.asm"), ("Text files", "*.txt"), ("All files", "*.*")]
        )
        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    content = f.read()
                self.code_text.delete(1.0, tk.END)
                self.code_text.insert(1.0, content)
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª:\n{str(e)}")
                
    def save_program(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ —Ñ–∞–π–ª"""
        from tkinter import filedialog
        filename = filedialog.asksaveasfilename(
            defaultextension=".asm",
            filetypes=[("Assembly files", "*.asm"), ("Text files", "*.txt"), ("All files", "*.*")]
        )
        if filename:
            try:
                content = self.code_text.get(1.0, tk.END)
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(content)
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {filename}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{str(e)}")
                
    def export_stats(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        from tkinter import filedialog
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã\n")
                    f.write("=" * 40 + "\n\n")
                    f.write(f"–®–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {self.processor.step_count}\n")
                    f.write(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {'–û–°–¢–ê–ù–û–í–õ–ï–ù' if self.processor.halted else '–ê–ö–¢–ò–í–ï–ù'}\n\n")
                    
                    f.write("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥:\n")
                    for cmd, count in self.performance_monitor.instruction_counts.items():
                        f.write(f"  {cmd}: {count}\n")
                        
                    f.write("\n–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n")
                    f.write(self.trace_text.get(1.0, tk.END))
                    
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {filename}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:\n{str(e)}")
                
    def toggle_fullscreen(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        current_state = self.root.attributes('-fullscreen')
        self.root.attributes('-fullscreen', not current_state)

def main():
    root = tk.Tk()
    app = EnhancedProcessorGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()

