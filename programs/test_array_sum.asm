; Вычисление суммы элементов массива
; Демонстрирует работу с массивами и циклами

START:
    LOAD #0          ; Инициализируем сумму
    STORE 100        ; Сохраняем в переменную sum
    LOAD #0          ; Инициализируем индекс
    STORE 101        ; Сохраняем в переменную i
    LOAD #5          ; Размер массива
    STORE 102        ; Сохраняем в переменную size

LOOP:
    LOAD 101         ; Загружаем i
    CMP 102          ; Сравниваем с size
    JZ END           ; Если i == size, завершаем
    
    ; Вычисляем адрес элемента: 200 + i
    LOAD 101         ; Загружаем i
    ADD #200         ; Добавляем базовый адрес массива
    STORE 103        ; Сохраняем адрес в temp
    
    ; Загружаем элемент массива (эмулируем косвенную адресацию)
    LOAD 103         ; Загружаем адрес
    STORE 104        ; Сохраняем для использования
    
    ; Проверяем каждый элемент отдельно (упрощенная версия)
    LOAD 101         ; Загружаем индекс
    CMP #0           ; Сравниваем с 0
    JZ ELEM0         ; Если i=0, загружаем элемент 0
    
    LOAD 101         ; Загружаем индекс
    CMP #1           ; Сравниваем с 1
    JZ ELEM1         ; Если i=1, загружаем элемент 1
    
    LOAD 101         ; Загружаем индекс
    CMP #2           ; Сравниваем с 2
    JZ ELEM2         ; Если i=2, загружаем элемент 2
    
    LOAD 101         ; Загружаем индекс
    CMP #3           ; Сравниваем с 3
    JZ ELEM3         ; Если i=3, загружаем элемент 3
    
    LOAD 101         ; Загружаем индекс
    CMP #4           ; Сравниваем с 4
    JZ ELEM4         ; Если i=4, загружаем элемент 4
    
    JMP NEXT         ; По умолчанию переходим к следующему

ELEM0:
    LOAD 200         ; Загружаем array[0] = 10
    JMP ADD_TO_SUM
    
ELEM1:
    LOAD 201         ; Загружаем array[1] = 20
    JMP ADD_TO_SUM
    
ELEM2:
    LOAD 202         ; Загружаем array[2] = 30
    JMP ADD_TO_SUM
    
ELEM3:
    LOAD 203         ; Загружаем array[3] = 40
    JMP ADD_TO_SUM
    
ELEM4:
    LOAD 204         ; Загружаем array[4] = 50
    JMP ADD_TO_SUM

ADD_TO_SUM:
    ADD 100          ; Добавляем к сумме
    STORE 100        ; Сохраняем новую сумму

NEXT:
    LOAD 101         ; Загружаем i
    ADD #1           ; Увеличиваем на 1
    STORE 101        ; Сохраняем обратно
    JMP LOOP         ; Переходим к началу цикла

END:
    HALT

; Тестовые данные (загружаются в память):
; Memory[200] = 10  (array[0])
; Memory[201] = 20  (array[1])
; Memory[202] = 30  (array[2])
; Memory[203] = 40  (array[3])
; Memory[204] = 50  (array[4])

; Ожидаемый результат:
; Memory[100] = 150 (сумма: 10+20+30+40+50 = 150)

; Переменные:
; Memory[100] = sum (накопленная сумма)
; Memory[101] = i (индекс текущего элемента)
; Memory[102] = size (размер массива)
; Memory[103] = temp (временная переменная)
; Memory[104] = addr (адрес элемента)
