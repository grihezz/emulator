; Программа свертки двух массивов
; Вариант №9 - Одноадресная архитектура Фон-Неймана
; A = [1, 2, 3, 4, 5, 6]
; B = [2, 3, 4, 5, 6, 7]
; Результат: 1*2 + 2*3 + 3*4 + 4*5 + 5*6 + 6*7 = 112

; Инициализация переменных
START:
    LOAD #0          ; Инициализируем сумму
    STORE 100        ; Сохраняем в переменную sum
    LOAD #0          ; Инициализируем индекс
    STORE 101        ; Сохраняем в переменную i
    LOAD #6          ; Размер массивов
    STORE 102        ; Сохраняем в переменную size

; Основной цикл свертки
LOOP:
    LOAD 101         ; Загружаем i
    CMP 102          ; Сравниваем с size
    JZ END           ; Если i == size, переходим к END
    
    ; Загружаем A[i]
    LOAD 101         ; Загружаем i
    ADD #200         ; Добавляем адрес начала массива A
    STORE 103        ; Сохраняем адрес A[i]
    LOAD (103)       ; Загружаем A[i] по косвенной адресации
    STORE 104        ; Сохраняем A[i] в переменную
    
    ; Загружаем B[i]
    LOAD 101         ; Загружаем i
    ADD #210         ; Добавляем адрес начала массива B
    STORE 105        ; Сохраняем адрес B[i]
    LOAD (105)       ; Загружаем B[i] по косвенной адресации
    STORE 106        ; Сохраняем B[i] в переменную
    
    ; Умножаем A[i] * B[i] (простое сложение в цикле)
    LOAD #0          ; Инициализируем произведение
    STORE 107        ; Сохраняем в переменную product
    
; Цикл умножения (A[i] * B[i])
MULT_LOOP:
    LOAD 106         ; Загружаем B[i]
    CMP #0           ; Сравниваем с 0
    JZ MULT_END      ; Если 0, заканчиваем умножение
    
    LOAD 107         ; Загружаем product
    ADD 104          ; Добавляем A[i]
    STORE 107        ; Сохраняем product
    
    LOAD 106         ; Загружаем B[i]
    SUB #1           ; Уменьшаем на 1
    STORE 106        ; Сохраняем обратно
    JMP MULT_LOOP    ; Переходим к началу цикла умножения

; Завершение умножения
MULT_END:
    LOAD 107         ; Загружаем произведение
    ADD 100          ; Добавляем к сумме
    STORE 100        ; Сохраняем новую сумму
    
    ; Переход к следующему элементу
    LOAD 101         ; Загружаем i
    ADD #1           ; Увеличиваем на 1
    STORE 101        ; Сохраняем обратно
    JMP LOOP         ; Переходим к началу цикла

; Завершение программы
END:
    HALT

; Данные (загружаются в память):
; Массив A (адреса 200-206):
; 200: 6    - размер массива
; 201: 1    - A[0]
; 202: 2    - A[1]
; 203: 3    - A[2]
; 204: 4    - A[3]
; 205: 5    - A[4]
; 206: 6    - A[5]

; Массив B (адреса 210-216):
; 210: 6    - размер массива
; 211: 2    - B[0]
; 212: 3    - B[1]
; 213: 4    - B[2]
; 214: 5    - B[3]
; 215: 6    - B[4]
; 216: 7    - B[5]

; Переменные:
; 100: sum      - накопленная сумма
; 101: i        - индекс текущего элемента
; 102: size     - размер массивов
; 103: addr_a   - адрес A[i]
; 104: val_a    - значение A[i]
; 105: addr_b   - адрес B[i]
; 106: val_b    - значение B[i]
; 107: product  - произведение A[i] * B[i]
