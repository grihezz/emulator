; Демонстрационная программа для визуализации потока данных
; Показывает различные типы операций и движение данных

START:
    ; Демонстрация загрузки констант
    LOAD #100        ; Загружаем константу 100
    STORE 50         ; Сохраняем в память
    
    LOAD #200        ; Загружаем константу 200
    STORE 51         ; Сохраняем в память
    
    ; Демонстрация арифметических операций
    LOAD 50          ; Загружаем первое число (100)
    ADD 51           ; Прибавляем второе число (200)
    STORE 52         ; Сохраняем результат (300)
    
    ; Демонстрация сравнения и переходов
    LOAD 52          ; Загружаем результат (300)
    CMP #300         ; Сравниваем с 300
    JZ CORRECT       ; Если равно, переходим к CORRECT
    
    ; Этот код не должен выполниться
    LOAD #999
    STORE 53
    JMP END
    
CORRECT:
    ; Демонстрация цикла
    LOAD #5          ; Загружаем счетчик цикла
    STORE 54         ; Сохраняем счетчик
    LOAD #0          ; Инициализируем аккумулятор
    STORE 55         ; Сохраняем аккумулятор

LOOP:
    LOAD 54          ; Загружаем счетчик
    CMP #0           ; Сравниваем с 0
    JZ END           ; Если 0, завершаем цикл
    
    LOAD 55          ; Загружаем аккумулятор
    ADD 54           ; Прибавляем текущий счетчик
    STORE 55         ; Сохраняем новый аккумулятор
    
    LOAD 54          ; Загружаем счетчик
    SUB #1           ; Уменьшаем на 1
    STORE 54         ; Сохраняем счетчик
    JMP LOOP         ; Повторяем цикл

END:
    ; Финальная демонстрация
    LOAD 55          ; Загружаем результат цикла (15)
    ADD #1000        ; Добавляем 1000
    STORE 56         ; Сохраняем финальный результат (1015)
    HALT

; Ожидаемые результаты:
; Memory[50] = 100   (первое число)
; Memory[51] = 200   (второе число)  
; Memory[52] = 300   (сумма)
; Memory[53] = 0     (не изменено)
; Memory[54] = 0     (счетчик после цикла)
; Memory[55] = 15    (результат цикла: 5+4+3+2+1)
; Memory[56] = 1015  (финальный результат: 15+1000)
