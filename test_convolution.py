#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–≤–µ—Ä—Ç–∫–∏
"""

from processor import Processor
from assembler import Assembler

def test_convolution():
    """–¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–≤–µ—Ä—Ç–∫–∏"""
    print("üßÆ –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–≤–µ—Ä—Ç–∫–∏ –º–∞—Å—Å–∏–≤–æ–≤")
    print("=" * 50)
    
    # –ß–∏—Ç–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
    with open('programs/convolution_simple.asm', 'r', encoding='utf-8') as f:
        source_code = f.read()
    
    print("üìù –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–≤–µ—Ä—Ç–∫–∏:")
    print("A = [2, 3], B = [4, 5]")
    print("–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 2*4 + 3*5 = 8 + 15 = 23")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    processor = Processor()
    assembler = Assembler()
    
    try:
        # –ê—Å—Å–µ–º–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\nüîß –ê—Å—Å–µ–º–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        instructions = assembler.assemble(source_code)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {len(instructions)}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        machine_codes = [instr['instruction'] for instr in instructions]
        processor.load_program(machine_codes)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        array_a = [2, 3]  # A = [2, 3]
        array_b = [4, 5]  # B = [4, 5]
        processor.load_data(array_a, 200)
        processor.load_data(array_b, 210)
        
        print("üìä –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:")
        print(f"   A = {array_a} (–∞–¥—Ä–µ—Å–∞ 200-201)")
        print(f"   B = {array_b} (–∞–¥—Ä–µ—Å–∞ 210-211)")
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        print("\nüöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
        processor.run(max_steps=100)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   ACC: {processor.ACC}")
        print(f"   –°—Ç–∞—Ç—É—Å: {'–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if processor.halted else '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'}")
        print(f"   –®–∞–≥–æ–≤: {processor.step_count}")
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–≤–µ—Ä—Ç–∫–∏:")
        result = processor.memory[100]
        print(f"   Memory[100] = {result}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        expected = 23  # 2*4 + 3*5 = 8 + 15 = 23
        if result == expected:
            print(f"   ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û! –û–∂–∏–¥–∞–ª–æ—Å—å {expected}, –ø–æ–ª—É—á–µ–Ω–æ {result}")
        else:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê! –û–∂–∏–¥–∞–ª–æ—Å—å {expected}, –ø–æ–ª—É—á–µ–Ω–æ {result}")
            
        print(f"\nüîç –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        for addr in range(200, 220):
            if processor.memory[addr] != 0:
                print(f"   Memory[{addr}] = {processor.memory[addr]}")
                
        return result == expected
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

if __name__ == "__main__":
    success = test_convolution()
    
    if success:
        print("\nüéâ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–≤–µ—Ä—Ç–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üìã –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–µ –≤ GUI:")
        print("   1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ programs/convolution_simple.asm")
        print("   2. –í—Å—Ç–∞–≤—å—Ç–µ –≤ –ø–æ–ª–µ '–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥' –≤ GUI")
        print("   3. –ù–∞–∂–º–∏—Ç–µ '–ê—Å—Å–µ–º–±–ª–∏—Ä–æ–≤–∞—Ç—å' ‚Üí '–ó–∞–≥—Ä—É–∑–∏—Ç—å'")
        print("   4. –ù–∞–∂–º–∏—Ç–µ '–°–±—Ä–æ—Å' ‚Üí '–ó–∞–ø—É—Å–∫'")
        print("   5. –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ Memory[100] = 23")
    else:
        print("\n‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–≤–µ—Ä—Ç–∫–∏ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
