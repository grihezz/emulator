#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
"""

import sys
import os
from processor import Processor
from assembler import Assembler

def test_program_file(filename, expected_results=None):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ —Ñ–∞–π–ª–∞"""
    print(f"\n{'='*60}")
    print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {filename}")
    print(f"{'='*60}")
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            source_code = f.read()
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏ –∞—Å—Å–µ–º–±–ª–µ—Ä
    processor = Processor()
    assembler = Assembler()
    
    try:
        # –ê—Å—Å–µ–º–±–ª–∏—Ä—É–µ–º –∫–æ–¥
        print("üìù –ê—Å—Å–µ–º–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        instructions = assembler.assemble(source_code)
        print(f"‚úÖ –ê—Å—Å–µ–º–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {len(instructions)}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
        machine_codes = [instr['instruction'] for instr in instructions]
        processor.load_program(machine_codes)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã
        if 'max_search' in filename or 'array' in filename:
            test_data = [10, 25, 5, 30, 15]  # –ú–∞—Å—Å–∏–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞–∫—Å–∏–º—É–º–∞
            processor.load_data(test_data, 200)
            print("üìä –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Å—Å–∏–≤–∞:", test_data)
        elif 'convolution' in filename:
            array_a = [2, 4, 6]
            array_b = [3, 5, 7]
            processor.load_data(array_a, 200)
            processor.load_data(array_b, 210)
            print("üìä –ó–∞–≥—Ä—É–∂–µ–Ω—ã –º–∞—Å—Å–∏–≤—ã A:", array_a, "B:", array_b)
        elif 'factorial' in filename:
            print("üìä –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        else:
            print("üìä –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
        print("üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
        steps = 0
        max_steps = 1000
        
        while not processor.halted and steps < max_steps:
            processor.step()
            steps += 1
            
        if processor.halted:
            print(f"‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {steps} —à–∞–≥–æ–≤")
        else:
            print(f"‚ö†Ô∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∑–∞ {max_steps} —à–∞–≥–æ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ, –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª)")
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìã –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:")
        print(f"   ACC: {processor.ACC} (0x{processor.ACC:04X})")
        print(f"   PC:  {processor.PC} (0x{processor.PC:04X})")
        print(f"   IR:  {processor.IR} (0x{processor.IR:04X})")
        print(f"   –§–ª–∞–≥–∏: ZF={processor.flags['ZF']} SF={processor.flags['SF']} CF={processor.flags['CF']} OF={processor.flags['OF']}")
        
        print("\nüíæ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–º—è—Ç–∏ (–Ω–µ–Ω—É–ª–µ–≤—ã–µ —è—á–µ–π–∫–∏):")
        for i in range(0, 300):
            if processor.memory[i] != 0:
                if i < 100:
                    print(f"   Memory[{i:3d}] = {processor.memory[i]:5d} (0x{processor.memory[i]:04X}) - –ü—Ä–æ–≥—Ä–∞–º–º–∞")
                elif i < 200:
                    print(f"   Memory[{i:3d}] = {processor.memory[i]:5d} (0x{processor.memory[i]:04X}) - –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
                else:
                    print(f"   Memory[{i:3d}] = {processor.memory[i]:5d} (0x{processor.memory[i]:04X}) - –î–∞–Ω–Ω—ã–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if expected_results:
            print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
            all_correct = True
            for addr, expected_value in expected_results.items():
                actual_value = processor.memory[addr]
                if actual_value == expected_value:
                    print(f"   ‚úÖ Memory[{addr}] = {actual_value} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_value})")
                else:
                    print(f"   ‚ùå Memory[{addr}] = {actual_value} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_value})")
                    all_correct = False
            
            if all_correct:
                print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
                
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º —ç–º—É–ª—è—Ç–æ—Ä–∞")
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º")
    
    # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_programs = [
        {
            'file': 'programs/simple_test.asm',
            'expected': {100: 42, 101: 12, 102: 12}
        },
        {
            'file': 'programs/array_demo.asm',
            'expected': {100: 150}  # 10+20+30+40+50 = 150
        }
    ]
    
    success_count = 0
    total_count = len(test_programs)
    
    for i, test_prog in enumerate(test_programs, 1):
        print(f"\nüî¨ –¢–µ—Å—Ç {i}/{total_count}")
        if test_program_file(test_prog['file'], test_prog.get('expected')):
            success_count += 1
            
    print(f"\n{'='*60}")
    print(f"üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print(f"{'='*60}")
    print(f"–£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_count/total_count*100:.1f}%")
    
    if success_count == total_count:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É GUI:")
        print("   –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:     python3 gui.py")
        print("   –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:  python3 visual_gui.py")
        print("   –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: python3 enhanced_gui.py")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
        
    print(f"\nüí° –î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ª—é–±–æ–π –∏–∑ GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤")
    print(f"   –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ –ø–∞–ø–∫–∏ programs/")

if __name__ == "__main__":
    main()
